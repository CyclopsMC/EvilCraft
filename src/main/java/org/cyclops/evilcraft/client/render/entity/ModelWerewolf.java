// Date: 24/01/2014 21:58:10
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
package org.cyclops.evilcraft.client.render.entity;

import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.model.HumanoidModel;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.client.model.geom.PartPose;
import net.minecraft.client.model.geom.builders.CubeListBuilder;
import net.minecraft.client.model.geom.builders.LayerDefinition;
import net.minecraft.client.model.geom.builders.MeshDefinition;
import net.minecraft.client.model.geom.builders.PartDefinition;
import org.cyclops.evilcraft.entity.monster.EntityWerewolf;

/**
 * @author Davivs69
 */
public class ModelWerewolf extends HumanoidModel<EntityWerewolf> {
    //fields
    ModelPart bipedEar1;
    ModelPart bipedEar2;
    ModelPart Upper_Jaw;
    ModelPart Lower_Jaw;

    /**
     * Make a new instance.
     */
    public ModelWerewolf(ModelPart modelPart) {
        super(modelPart);
        setRotation(head, 0F, 0F, 0F);

        bipedEar1 = modelPart.getChild("bipedEar1");
        setRotation(bipedEar1, 0F, 0F, 0F);
        bipedEar2 = modelPart.getChild("bipedEar2");
        setRotation(bipedEar2, 0F, 0F, 0F);
        Upper_Jaw = modelPart.getChild("Upper_Jaw");
        setRotation(Upper_Jaw, 0F, 0F, 0F);
        Lower_Jaw = modelPart.getChild("Lower_Jaw");
        setRotation(Lower_Jaw, 0.1745329F, 0F, 0F);

        setRotation(body, 0F, 0F, 0F);
        setRotation(rightArm, 0.1047198F, 0F, 0F);
        setRotation(leftArm, 0.1047198F, 0F, 0F);
        setRotation(rightLeg, 0F, 0F, 0F);
        setRotation(leftLeg, 0F, 0F, 0F);
    }

    @Override
    public void renderToBuffer(PoseStack matrixStackIn, VertexConsumer bufferIn, int packedLightIn, int packedOverlayIn, float red, float green, float blue, float alpha) {
        // Not sure why, but we need to reset the y of the body to be in its correct position
        body.y = -13F;

        head.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        bipedEar1.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        bipedEar2.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        Upper_Jaw.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        Lower_Jaw.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        body.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightArm.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftArm.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        rightLeg.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        leftLeg.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
    }

    private void setRotation(ModelPart model, float x, float y, float z) {
        model.xRot = x;
        model.yRot = y;
        model.zRot = z;
    }

    @Override
    public void setupAnim(EntityWerewolf entityIn, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        super.setupAnim(entityIn, limbSwing, limbSwingAmount, ageInTicks, netHeadYaw, headPitch);
        head.setPos(0F, -13F, 0F);
        rightArm.setPos(-7F, -8F, 0F);
        leftArm.setPos(7F, -8F, 0F);
        rightLeg.setPos(-3F, 6F, 0F);
        leftLeg.setPos(3F, 6F, 0F);

        this.bipedEar1.yRot = this.head.yRot;
        this.bipedEar1.xRot = this.head.xRot;
        this.bipedEar2.yRot = this.head.yRot;
        this.bipedEar2.xRot = this.head.xRot;

        float barkRotation = entityIn.getBarkProgressScaled(0.1745329F);
        setRotation(Upper_Jaw, this.head.xRot + 0F, this.head.yRot + 0F, 0F);
        setRotation(Lower_Jaw, this.head.xRot + barkRotation, this.head.yRot + 0F, 0F);
    }

    public static LayerDefinition createBodyLayer() {
        MeshDefinition meshdefinition = new MeshDefinition();
        PartDefinition partdefinition = meshdefinition.getRoot();

        partdefinition.addOrReplaceChild("head", CubeListBuilder.create()
                        .texOffs(24, 0)
                        .addBox(-5F, -10F, -5F, 10, 10, 10)
                        .mirror(),
                PartPose.offset(0F, -13F, 0F));
        partdefinition.addOrReplaceChild("hat", CubeListBuilder.create(),
                PartPose.offset(0F, 0F, 0F));
        partdefinition.addOrReplaceChild("bipedEar1", CubeListBuilder.create()
                        .texOffs(18, 0)
                        .addBox(-4F, -14F, 2F, 2, 4, 1)
                        .mirror(),
                PartPose.offset(0F, -13F, 0F));
        partdefinition.addOrReplaceChild("bipedEar2", CubeListBuilder.create()
                        .texOffs(12, 0)
                        .addBox(2F, -14F, 2F, 2, 4, 1)
                        .mirror(),
                PartPose.offset(0F, -13F, 0F));
        partdefinition.addOrReplaceChild("Upper_Jaw", CubeListBuilder.create()
                        .texOffs(32, 122)
                        .addBox(-3F, -7F, -11F, 6, 3, 10)
                        .mirror(),
                PartPose.offset(0F, -13F, 0F));
        partdefinition.addOrReplaceChild("Lower_Jaw", CubeListBuilder.create()
                        .texOffs(0, 122)
                        .addBox(-3F, -4F, -10F, 6, 2, 10)
                        .mirror(),
                PartPose.offset(0F, -13F, 0F));
        partdefinition.addOrReplaceChild("body", CubeListBuilder.create()
                        .texOffs(12, 20)
                        .addBox(-7F, 0F, -6F, 14, 19, 12)
                        .mirror(),
                PartPose.offset(0F, -13F, 0F));

        partdefinition.addOrReplaceChild("right_arm", CubeListBuilder.create()
                        .texOffs(22, 51)
                        .addBox(-4F, -2F, -16F, 4, 4, 17)
                        .mirror(),
                PartPose.offset(-7F, -8F, 0F));
        partdefinition.addOrReplaceChild("left_arm", CubeListBuilder.create()
                        .texOffs(0, 72)
                        .addBox(0F, -2F, -16F, 4, 4, 17)
                        .mirror(),
                PartPose.offset(7F, -8F, 0F));
        partdefinition.addOrReplaceChild("right_leg", CubeListBuilder.create()
                        .texOffs(44, 93)
                        .addBox(-2.5F, 0F, -2.5F, 5, 18, 5)
                        .mirror(),
                PartPose.offset(-3F, 6F, 0F));
        partdefinition.addOrReplaceChild("left_leg", CubeListBuilder.create()
                        .texOffs(24, 93)
                        .addBox(-2.5F, 0F, -2.5F, 5, 18, 5)
                        .mirror(),
                PartPose.offset(3F, 6F, 0F));

        return LayerDefinition.create(meshdefinition, 64, 135);
    }

}
