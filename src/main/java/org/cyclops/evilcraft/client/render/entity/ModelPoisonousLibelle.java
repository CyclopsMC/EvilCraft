// Date: 24/01/2014 21:58:10
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
package org.cyclops.evilcraft.client.render.entity;

import com.mojang.blaze3d.vertex.PoseStack;
import com.mojang.blaze3d.vertex.VertexConsumer;
import net.minecraft.client.model.EntityModel;
import net.minecraft.client.model.geom.ModelPart;
import net.minecraft.client.model.geom.PartPose;
import net.minecraft.client.model.geom.builders.CubeListBuilder;
import net.minecraft.client.model.geom.builders.LayerDefinition;
import net.minecraft.client.model.geom.builders.MeshDefinition;
import net.minecraft.client.model.geom.builders.PartDefinition;
import org.cyclops.evilcraft.entity.monster.EntityPoisonousLibelle;

import java.util.LinkedList;
import java.util.List;

/**
 * @author Davivs69
 */
public class ModelPoisonousLibelle extends EntityModel<EntityPoisonousLibelle> {
    //fields
    ModelPart head;
    ModelPart body;
    ModelPart ass;
    ModelPart Right_L_wing;
    ModelPart Left_L_wing;
    ModelPart Right_M_wing;
    ModelPart Left_M_wing;

    private List<ModelPart> wings_left = new LinkedList<ModelPart>();
    private List<ModelPart> wings_right = new LinkedList<ModelPart>();

    /**
     * Make a new instance.
     */
    public ModelPoisonousLibelle(ModelPart modelPart) {
        head = modelPart.getChild("head");
        setRotation(head, 0F, 0F, 0F);
        body = modelPart.getChild("body");
        setRotation(body, 0F, 0F, 0F);
        ass = modelPart.getChild("ass");
        setRotation(ass, 0F, 0F, 0F);
        Right_L_wing = modelPart.getChild("Right_L_wing");
        setRotation(Right_L_wing, 0F, 0F, 0.2617994F);
        Left_L_wing = modelPart.getChild("Left_L_wing");
        setRotation(Left_L_wing, 0F, 0F, -0.2617994F);
        Right_M_wing = modelPart.getChild("Right_M_wing");
        setRotation(Right_M_wing, 0F, 0F, 0.2617994F);
        Left_M_wing = modelPart.getChild("Left_M_wing");
        setRotation(Left_M_wing, 0F, 0F, -0.2617994F);

        wings_left.add(Left_L_wing);
        wings_left.add(Left_M_wing);
        wings_right.add(Right_L_wing);
        wings_right.add(Right_M_wing);
    }

    private void setRotation(ModelPart model, float x, float y, float z) {
        model.xRot = x;
        model.yRot = y;
        model.zRot = z;
    }

    @Override
    public void setupAnim(EntityPoisonousLibelle entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        float wingRotation = entity.getWingProgressScaled(0.2617994F);
        rotateWings(wings_left, -wingRotation);
        rotateWings(wings_right, wingRotation);
    }

    private void rotateWings(List<ModelPart> wings, float rotation) {
        for(ModelPart wing : wings) {
            setRotation(wing, 0F, 0F, rotation);
        }
    }

    @Override
    public void renderToBuffer(PoseStack matrixStackIn, VertexConsumer bufferIn, int packedLightIn, int packedOverlayIn, int color) {
        head.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, color);
        body.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, color);
        ass.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, color);
        Right_L_wing.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, color);
        Left_L_wing.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, color);
        Right_M_wing.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, color);
        Left_M_wing.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, color);
    }

    public static LayerDefinition createBodyLayer() {
        MeshDefinition meshdefinition = new MeshDefinition();
        PartDefinition partdefinition = meshdefinition.getRoot();

        partdefinition.addOrReplaceChild("head", CubeListBuilder.create()
                        .texOffs(25, 0)
                        .addBox(-1.5F, -1.5F, -1.5F, 3, 3, 3)
                        .mirror(),
                PartPose.offset(0.5F, 10F, 7F));
        partdefinition.addOrReplaceChild("body", CubeListBuilder.create()
                        .texOffs(38, 0)
                        .addBox(-1F, -1F, -11F, 2, 2, 11)
                        .mirror(),
                PartPose.offset(0.5F, 10F, 6F));
        partdefinition.addOrReplaceChild("ass", CubeListBuilder.create()
                        .texOffs(1, 0)
                        .addBox(-0.5F, -0.5F, -10F, 1, 1, 10)
                        .mirror(),
                PartPose.offset(0.5F, 10F, -5F));
        partdefinition.addOrReplaceChild("Right_L_wing", CubeListBuilder.create()
                        .texOffs(0, 17)
                        .addBox(-8F, 0F, -2F, 8, 1, 4)
                        .mirror(),
                PartPose.offset(0F, 9F, 3F));
        partdefinition.addOrReplaceChild("Left_L_wing", CubeListBuilder.create()
                        .texOffs(24, 17)
                        .addBox(0F, 0F, -2F, 8, 1, 4)
                        .mirror(),
                PartPose.offset(0.5F, 9F, 3F));
        partdefinition.addOrReplaceChild("Right_M_wing", CubeListBuilder.create()
                        .texOffs(0, 23)
                        .addBox(-6F, 0F, -1.5F, 6, 1, 3)
                        .mirror(),
                PartPose.offset(0F, 9F, -2F));
        partdefinition.addOrReplaceChild("Left_M_wing", CubeListBuilder.create()
                        .texOffs(18, 23)
                        .addBox(0F, 0F, -1.5F, 6, 1, 3)
                        .mirror(),
                PartPose.offset(1F, 9F, -2F));

        return LayerDefinition.create(meshdefinition, 64, 32);
    }
}
