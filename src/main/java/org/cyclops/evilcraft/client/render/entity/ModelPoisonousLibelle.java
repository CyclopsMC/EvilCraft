// Date: 24/01/2014 21:58:10
// Template version 1.1
// Java generated by Techne
// Keep in mind that you still need to fill in some blanks
// - ZeuX
package org.cyclops.evilcraft.client.render.entity;

import com.mojang.blaze3d.matrix.MatrixStack;
import com.mojang.blaze3d.vertex.IVertexBuilder;
import net.minecraft.client.renderer.entity.model.EntityModel;
import net.minecraft.client.renderer.model.ModelRenderer;
import org.cyclops.evilcraft.entity.monster.EntityPoisonousLibelle;

import java.util.LinkedList;
import java.util.List;

/**
 * @author Davivs69
 */
public class ModelPoisonousLibelle extends EntityModel<EntityPoisonousLibelle> {
    //fields
    ModelRenderer head;
    ModelRenderer body;
    ModelRenderer ass;
    ModelRenderer Right_L_wing;
    ModelRenderer Left_L_wing;
    ModelRenderer Right_M_wing;
    ModelRenderer Left_M_wing;
    
    private List<ModelRenderer> wings_left = new LinkedList<ModelRenderer>();
    private List<ModelRenderer> wings_right = new LinkedList<ModelRenderer>();

    /**
     * Make a new instance.
     */
    public ModelPoisonousLibelle() {
        this.texWidth = 64;
        this.texHeight = 32;

        head = new ModelRenderer(this, 25, 0);
        head.addBox(-1.5F, -1.5F, -1.5F, 3, 3, 3);
        head.setPos(0.5F, 10F, 7F);
        head.setTexSize(64, 135);
        head.mirror = true;
        setRotation(head, 0F, 0F, 0F);
        body = new ModelRenderer(this, 38, 0);
        body.addBox(-1F, -1F, -11F, 2, 2, 11);
        body.setPos(0.5F, 10F, 6F);
        body.setTexSize(64, 135);
        body.mirror = true;
        setRotation(body, 0F, 0F, 0F);
        ass = new ModelRenderer(this, 1, 0);
        ass.addBox(-0.5F, -0.5F, -10F, 1, 1, 10);
        ass.setPos(0.5F, 10F, -5F);
        ass.setTexSize(64, 135);
        ass.mirror = true;
        setRotation(ass, 0F, 0F, 0F);
        Right_L_wing = new ModelRenderer(this, 0, 17);
        Right_L_wing.addBox(-8F, 0F, -2F, 8, 1, 4);
        Right_L_wing.setPos(0F, 9F, 3F);
        Right_L_wing.setTexSize(64, 135);
        Right_L_wing.mirror = true;
        setRotation(Right_L_wing, 0F, 0F, 0.2617994F);
        Left_L_wing = new ModelRenderer(this, 24, 17);
        Left_L_wing.addBox(0F, 0F, -2F, 8, 1, 4);
        Left_L_wing.setPos(0.5F, 9F, 3F);
        Left_L_wing.setTexSize(64, 135);
        Left_L_wing.mirror = true;
        setRotation(Left_L_wing, 0F, 0F, -0.2617994F);
        Right_M_wing = new ModelRenderer(this, 0, 23);
        Right_M_wing.addBox(-6F, 0F, -1.5F, 6, 1, 3);
        Right_M_wing.setPos(0F, 9F, -2F);
        Right_M_wing.setTexSize(64, 135);
        Right_M_wing.mirror = true;
        setRotation(Right_M_wing, 0F, 0F, 0.2617994F);
        Left_M_wing = new ModelRenderer(this, 18, 23);
        Left_M_wing.addBox(0F, 0F, -1.5F, 6, 1, 3);
        Left_M_wing.setPos(1F, 9F, -2F);
        Left_M_wing.setTexSize(64, 135);
        Left_M_wing.mirror = true;
        setRotation(Left_M_wing, 0F, 0F, -0.2617994F);
        
        wings_left.add(Left_L_wing);
        wings_left.add(Left_M_wing);
        wings_right.add(Right_L_wing);
        wings_right.add(Right_M_wing);
    }

    private void setRotation(ModelRenderer model, float x, float y, float z) {
        model.xRot = x;
        model.yRot = y;
        model.zRot = z;
    }

    @Override
    public void setupAnim(EntityPoisonousLibelle entity, float limbSwing, float limbSwingAmount, float ageInTicks, float netHeadYaw, float headPitch) {
        float wingRotation = entity.getWingProgressScaled(0.2617994F);
        rotateWings(wings_left, -wingRotation);
        rotateWings(wings_right, wingRotation);
    }
    
    private void rotateWings(List<ModelRenderer> wings, float rotation) {
        for(ModelRenderer wing : wings) {
            setRotation(wing, 0F, 0F, rotation);
        }
    }

    @Override
    public void renderToBuffer(MatrixStack matrixStackIn, IVertexBuilder bufferIn, int packedLightIn, int packedOverlayIn, float red, float green, float blue, float alpha) {
        head.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        body.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        ass.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        Right_L_wing.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        Left_L_wing.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        Right_M_wing.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
        Left_M_wing.render(matrixStackIn, bufferIn, packedLightIn, packedOverlayIn, red, green, blue, alpha);
    }
}
